import { Agent, run } from '@openai/agents';
import { createCalEvent } from '../calendar/google';

export interface ConversationContext {
  barberName?: string;
  clientName?: string;
  appointmentTime?: string;
  appointmentDate?: string;
  isCompleted?: boolean;
}

export interface BarberConversation {
  thread: any[];
  context: ConversationContext;
  jid: string; // WhatsApp JID of the barber
}

// Global conversations storage (in production this should be persisted)
const conversations = new Map<string, BarberConversation>();

const barberAgent = new Agent({
  name: 'BarberBookingAgent',
  instructions: `Sen TÃ¼rkiye'de yaÅŸayan bir mÃ¼ÅŸterinin kiÅŸisel asistanÄ±sÄ±n. GÃ¶revin mÃ¼ÅŸteri adÄ±na berberlere yazÄ±p saÃ§ kesimi randevusu almak.

KURALLARIN:
1. Her zaman kibar, samimi ve doÄŸal bir TÃ¼rkÃ§e kullan
2. MÃ¼ÅŸteri adÄ±na konuÅŸ, sanki mÃ¼ÅŸterinin kendisi yazÄ±yormuÅŸ gibi
3. Randevu talep ederken aÃ§Ä±k ve net ol
4. Berber saat Ã¶nerdiÄŸinde, uygun olan saati onayla
5. Randevu konfirme olduÄŸunda, mesajÄ±n sonunda [CONFIRMED:HH:MM] formatÄ±nda belirt
6. Maksimum 3-4 mesajda randevu almaya Ã§alÄ±ÅŸ

HEDEF: MÃ¼ÅŸteri iÃ§in uygun bir saatte saÃ§ kesimi randevusu almak.

Ã–rnekler:
- Ä°lk mesaj: "Merhaba! SaÃ§ kesimi randevusu almak istiyorum. BugÃ¼n veya yarÄ±n mÃ¼sait saatleriniz var mÄ±?"
- Onaylama: "Harika! 15:00 saati benim iÃ§in uygun. TeÅŸekkÃ¼rler! [CONFIRMED:15:00]"`
});

export async function startConversationWithBarber(
  jid: string, 
  clientName: string, 
  barberName?: string
): Promise<string> {
  const context: ConversationContext = {
    clientName,
    barberName,
    isCompleted: false
  };
  
  const initialPrompt = barberName 
    ? `${barberName} ismindeki berbere ${clientName} adÄ±na saÃ§ kesimi randevusu almak iÃ§in samimi bir mesaj yaz. BugÃ¼n veya yarÄ±n iÃ§in uygun saatleri sor.`
    : `${clientName} adÄ±na berbere saÃ§ kesimi randevusu almak iÃ§in samimi bir mesaj yaz. BugÃ¼n veya yarÄ±n iÃ§in uygun saatleri sor.`;
  
  const result = await run(barberAgent, initialPrompt);
  
  conversations.set(jid, {
    thread: [], // We'll manage this manually since we need to track the conversation state
    context,
    jid
  });
  
  return result.finalOutput || 'Hata oluÅŸtu';
}

export async function continueConversationWithBarber(
  jid: string,
  barberMessage: string
): Promise<string> {
  const conversation = conversations.get(jid);
  if (!conversation) {
    throw new Error('Conversation not found');
  }
  
  const userPrompt = `Berber ÅŸÃ¶yle cevap verdi: "${barberMessage}"\n\nBu mesaja uygun ÅŸekilde cevap ver. EÄŸer saat Ã¶nerdi ve uygunsa onayla ve randevuyu kesinleÅŸtir. EÄŸer randevu kesinleÅŸtiyse mesajÄ±n sonuna [CONFIRMED:HH:MM] formatÄ±nda ekle.`;
  
  const result = await run(barberAgent, userPrompt);
  
  const response = result.finalOutput || 'Hata oluÅŸtu';
  
  // Check if appointment was confirmed
  const confirmedMatch = response.match(/\[CONFIRMED:(\d{1,2}:\d{2})\]/);
  if (confirmedMatch) {
    const time = confirmedMatch[1];
    conversation.context.appointmentTime = time;
    conversation.context.isCompleted = true;
    
    // Create calendar event
    try {
      await createCalendarEvent(time, conversation.context.barberName);
      console.log(`ğŸ“… Calendar event created for ${time}`);
    } catch (error) {
      console.error('Failed to create calendar event:', error);
    }
  }
  
  // Update conversation context
  conversations.set(jid, conversation);
  
  return response;
}

async function createCalendarEvent(time: string, barberName?: string) {
  try {
    const appointmentDate = new Date();
    const [hours, minutes] = time.split(':').map(Number);
    
    const startTime = new Date(appointmentDate);
    startTime.setHours(hours, minutes, 0, 0);
    
    const endTime = new Date(startTime);
    endTime.setHours(hours + 1, minutes, 0, 0); // Default 1 hour duration
    
    await createCalEvent({
      start: startTime,
      end: endTime,
      summary: barberName ? `SaÃ§ kesimi - ${barberName}` : 'SaÃ§ kesimi randevusu'
    });
    
    return { success: true, message: 'Randevu takvime eklendi' };
  } catch (error) {
    console.error('Calendar event creation failed:', error);
    return { success: false, message: 'Takvime eklenirken hata oluÅŸtu' };
  }
}

export function getConversationContext(jid: string): ConversationContext | null {
  const conversation = conversations.get(jid);
  return conversation ? conversation.context : null;
}

export function isConversationCompleted(jid: string): boolean {
  const context = getConversationContext(jid);
  return context?.isCompleted || false;
}

export function getAllActiveConversations(): string[] {
  return Array.from(conversations.keys()).filter(jid => !isConversationCompleted(jid));
} 